def failOnNewParams() {
    params.each({ key, value ->
        if (env[key].toString() != params[key].toString()) {
           print("Появился новый параметр $key")
           currentBuild.result = 'ABORTED'
           error('Параметры в UI и в пайплане отличались. Перезапустите задачу, пожалуйста')
        }
    })
}

mmCommonChannel = 'devops-jenkins-notifications'

environments = [
    "stage": [
        helm_ctx: "staging",
        helm_ns: "namespace1"
    ],
    "prod": [
        helm_ctx: "production",
        helm_ns: "namespace2"
    ]
]

pipeline {
    agent any

    triggers {
        cron('H 8 * * 1-5')
    }

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }

    parameters {
        choice(
            name: "ENVIRONMENT",
            choices: ["stage", "prod"]
        )
        string(
            name: 'BRANCH',
            defaultValue: 'master',
            description: 'Ветка с кодом'
        )
        booleanParam(
            name: 'DRY_RUN',
            defaultValue: false,
            description: 'Посмотреть результат'
        )
    }

    stages {
        stage('Prepare') {
            steps {
                script {
                    buildName "#${env.BUILD_NUMBER} ${params.BRANCH} [${params.ENVIRONMENT}]"
                    failOnNewParams()
                    helmfileCommand = params.DRY_RUN ? 'diff' : 'apply'
                }
            }
        }
        stage('Pull') {
            steps {
                script {
                    dir('dgctl') {
                        sh(script: "echo Получаение внешних данных для: ${params.ENVIRONMENT}")
                    }
                }
            }
        }

        stage('Update') {
            steps {
                dir('helmfile') {
                    sh(script: "echo helmfile --kube-context=${environments[params.ENVIRONMENT].helm_ctx} -e staging -f deploy/all_services.yaml --context=1 ${helmfileCommand}")
                }
            }
        }

        stage('Post info') {
            steps {
                script {
                    sh(script: "echo helm --kube-context=${environments[params.ENVIRONMENT].helm_ctx} -n ${environments[params.ENVIRONMENT].helm_ns} list -a")
                }
            }
        }
    }

    post {
        always {
            script {
                sh(script: "echo Send mm notification: ${env.JOB_NAME} ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Link to build>). Статус: ${currentBuild.result}")
            }
        }
        cleanup {
            cleanWs()
        }
    }
}
